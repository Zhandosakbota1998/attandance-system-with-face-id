<p id="notice"><%= notice %></p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
<div data-controller="lessons">
</div>
<h1>Group: <%= link_to @group.name, @group %>, Subject: <%= link_to @subject.name, [@group, @subject] %></h1>
<div class="spinner-grow text-info" style="width: 3rem; height: 3rem; margin-left: 48%; padding-left: -25px; margin-top: 100px" role="status" id="loader">
  <span class="sr-only">Loading...</span>
</div>
<div class="row">
<div style="position: relative" class="col">
  <video onloadedmetadata="onPlay(this)" id="inputVideo" autoplay muted playsinline></video>
  <canvas id="overlay" width="720" height="405" />
</div>
<div class="col" style="height: 405px; overflow: hidden;" id="log">
</div>
</div>
<%= form_with(model: [@group, @subject, @lesson], local: true, id: "live-form") do |form| %>
  <%= form.submit "Stop", class: "btn btn-outline-danger btn-lg btn-block" %>
<% end %>

<script>

var students = JSON.parse('<%= raw @group.students.select{|x| x.images.length > 0}.map{|x| [x, x.images.map{|i| url_for(i)}] }.to_json %>')
// console.log(imgUrl)
console.log(students)

function getFaceImageUri(className, idx) {
    return `${className}/${className}${idx}.png`
}

async function getFaceDescriptor(imagePath) {    
  //create canvas
  var canvas = document.createElement('canvas');

  canvas.id = "CursorLayer";
  canvas.width = 1224;
  canvas.height = 768;
  canvas.style.display = "none"

  var body = document.getElementsByTagName("body")[0];
  body.appendChild(canvas);
  const ctx = canvas.getContext('2d');
  const img = await faceapi.fetchImage(imagePath)
  ctx.drawImage(img, 0, 0)

  //face detection
  const useTinyModel = true;
  const faceDescriptor = await faceapi
  .detectSingleFace(canvas)
  .withFaceLandmarks(useTinyModel)
  .withFaceDescriptor();

  $("#" + canvas.id).remove();
  return faceDescriptor.descriptor;
}

// fetch first image of each class and compute their descriptors
async function createBbtFaceMatcher(numImagesForTraining = 3) {
    const maxAvailableImagesPerClass = 6
    numImagesForTraining = Math.min(numImagesForTraining, maxAvailableImagesPerClass)
    const labeledFaceDescriptors = await Promise.all(students.map(
        async student => {
            console.log(student);
            const descriptors = []
            for (let i = 0; i < Math.min(numImagesForTraining, student[1].length); i++) {
                // if ()
                console.log(i);
                descriptors.push(await getFaceDescriptor(student[1][i]))

                // const img = await faceapi.fetchImage(student[1][i])
                // console.log(img);
                // console.log(student[1][i])
                // descriptors.push(await faceapi.computeFaceDescriptor(img))
            }
            console.log(student[0].full_name)
            return new faceapi.LabeledFaceDescriptors(student[0].id + ":" + student[0].full_name, descriptors)
        }
    ))
    console.log(labeledFaceDescriptors);
    return new faceapi.FaceMatcher(labeledFaceDescriptors)
}

const SSD_MOBILENETV1 = 'ssd_mobilenetv1'
const TINY_FACE_DETECTOR = 'tiny_face_detector'
// ssd_mobilenetv1 options
let minConfidence = 0.5
// tiny_face_detector options
let inputSize = 512
let scoreThreshold = 0.5


let forwardTimes = [];
let existStudents = {};
console.log(existStudents);

async function onPlay() {
    const videoEl = $('#inputVideo').get(0)
    if (videoEl.paused || videoEl.ended)
        return setTimeout(() => onPlay())
    // const options = getFaceDetectorOptions()
    const results = await faceapi.detectAllFaces(videoEl)
        .withFaceLandmarks()
        .withFaceExpressions()
        .withFaceDescriptors()

    if (results) {
        const canvas = $('#overlay').get(0)
        faceapi.matchDimensions(canvas, videoEl)
        const dims = { width: 720, height: 405 }
        // faceapi.draw.drawDetections(canvas, faceapi.resizeResults(result, dims))
        // resize detection and landmarks in case displayed image is smaller than
        // original size
        const resizedResults = faceapi.resizeResults(results, dims)
        resizedResults.forEach(({
            detection,
            descriptor
        }) => {
            const label = faceMatcher.findBestMatch(descriptor).toString();
            if (faceMatcher.findBestMatch(descriptor).label.split(":").length > 1) {
              var studentId = faceMatcher.findBestMatch(descriptor).label.split(":")[0];
              if (!existStudents[studentId]) {
                existStudents[studentId] = true;
                $("#log").prepend('<div class="alert alert-success" role="alert">' + faceMatcher.findBestMatch(descriptor).label.split(":")[1] + ' is here!</div>');
                $("#live-form").append('<input value="' + studentId + '" type="hidden" name="lesson[student_ids][]" id="lesson_student_ids">');
              }
            }
            const options = {
                label
            }
            const drawBox = new faceapi.draw.DrawBox(detection.box, options)
            drawBox.draw(canvas)
        })
    }
    setTimeout(() => onPlay())
}
async function run() {
    // load face detection model
    // load face detection, face landmark model and face recognition models
    await faceapi.loadTinyFaceDetectorModel('/');
    await faceapi.loadSsdMobilenetv1Model('/')
    await faceapi.loadFaceLandmarkModel('/')
    await faceapi.loadFaceRecognitionModel('/')
    await faceapi.loadFaceLandmarkTinyModel('/')
    await faceapi.loadFaceExpressionModel('/')

    // initialize face matcher with 1 reference descriptor per bbt character
    faceMatcher = await createBbtFaceMatcher(6)
    $('#loader').hide();
    // try to access users webcam and stream the images
    // to the video element
    const stream = await navigator.mediaDevices.getUserMedia({
        video: {

        }
    })
    const videoEl = $('#inputVideo').get(0)
    videoEl.width = 720;
    videoEl.height = 405;
    videoEl.srcObject = stream
}

function updateResults() {}
$(document).ready(function() {
    $('#loader').show();
    run()
});
</script>